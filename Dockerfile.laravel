# Args for interactive start.sh
ARG VERSION=${PHP_VERSION}

FROM hydromoon/laravel-base:${VERSION} as vendor
ENV COMPOSER_VER=${COMPOSER_VERSION}

## Stage 1
RUN mkdir -p /var/app
WORKDIR /var/app
RUN php -r "readfile('http://getcomposer.org/installer');" | php -- --version=${COMPOSER_VER} --install-dir=/usr/bin/ --filename=composer
# Copying composer.json & composer.lock
COPY composer.json composer.lock /var/app/
# Just in case composer run out of memory
RUN COMPOSER_MEMORY_LIMIT=-1 composer install \
    --ignore-platform-reqs \
    --no-interaction \
    --no-plugins \
    --no-scripts \
    --prefer-dist
# Stage 1 finished

FROM hydromoon/laravel-base:${VERSION} as main
# Modify settings
ARG ENABLE_CRON=true
ARG INSTALL_NODE=true
ARG INSTALL_NODE_VERSION=18

# Prepare webserver configurations & Daemonized apps (nginx & php-fpm & laravel queue)
COPY moadf/prepare /prepare/
COPY moadf/daemons /daemons/
RUN chmod +x /prepare/setup.sh && /prepare/setup.sh && rm /prepare/setup.sh

# Adding startup script
RUN mkdir -p /etc/my_init.d
COPY moadf/startup/ /etc/my_init.d/
RUN chmod +x /etc/my_init.d/*.sh

# Frontend build and compilation
# FROM node:18.19.1-bookworm-slim as builder
# WORKDIR /var/www/app
# COPY . /var/www/app/
# RUN npm install && npm run build

FROM main as final

WORKDIR /var/app

# Add users if needed
# RUN useradd -m -s /bin/bash qasim

# Copy composer as different name because
# will use other script to call composer with the right user
COPY --from=vendor /usr/bin/composer /usr/bin/ncomposer
COPY --chown=www-data:www-data --from=vendor /var/app/vendor /var/app/vendor
COPY --chown=www-data:www-data . /var/app/
# Copy assets from frontend stage
# COPY --chown=www-data:www-data --from=builder /var/www/app/public/build /var/www/app/public/build

# Remove on production
RUN mv .env.example .env
# Expose sshd port if enabled (Port 2222)
EXPOSE 80
